public struct Instruction: RawRepresentable {
  public let rawValue: BinaryenOp

  init(value: BinaryenOp) { rawValue = value }
  public init?(rawValue: BinaryenOp) { self.rawValue = rawValue }

    public static var clzInt32: Self { .init(value: BinaryenClzInt32()) }
    public static var ctzInt32: Self { .init(value: BinaryenCtzInt32()) }
    public static var popcntInt32: Self { .init(value: BinaryenPopcntInt32()) }
    public static var negFloat32: Self { .init(value: BinaryenNegFloat32()) }
    public static var absFloat32: Self { .init(value: BinaryenAbsFloat32()) }
    public static var ceilFloat32: Self { .init(value: BinaryenCeilFloat32()) }
    public static var floorFloat32: Self { .init(value: BinaryenFloorFloat32()) }
    public static var truncFloat32: Self { .init(value: BinaryenTruncFloat32()) }
    public static var nearestFloat32: Self { .init(value: BinaryenNearestFloat32()) }
    public static var sqrtFloat32: Self { .init(value: BinaryenSqrtFloat32()) }
    public static var eqZInt32: Self { .init(value: BinaryenEqZInt32()) }
    public static var clzInt64: Self { .init(value: BinaryenClzInt64()) }
    public static var ctzInt64: Self { .init(value: BinaryenCtzInt64()) }
    public static var popcntInt64: Self { .init(value: BinaryenPopcntInt64()) }
    public static var negFloat64: Self { .init(value: BinaryenNegFloat64()) }
    public static var absFloat64: Self { .init(value: BinaryenAbsFloat64()) }
    public static var ceilFloat64: Self { .init(value: BinaryenCeilFloat64()) }
    public static var floorFloat64: Self { .init(value: BinaryenFloorFloat64()) }
    public static var truncFloat64: Self { .init(value: BinaryenTruncFloat64()) }
    public static var nearestFloat64: Self { .init(value: BinaryenNearestFloat64()) }
    public static var sqrtFloat64: Self { .init(value: BinaryenSqrtFloat64()) }
    public static var eqZInt64: Self { .init(value: BinaryenEqZInt64()) }
    public static var extendSInt32: Self { .init(value: BinaryenExtendSInt32()) }
    public static var extendUInt32: Self { .init(value: BinaryenExtendUInt32()) }
    public static var wrapInt64: Self { .init(value: BinaryenWrapInt64()) }
    public static var truncSFloat32ToInt32: Self { .init(value: BinaryenTruncSFloat32ToInt32()) }
    public static var truncSFloat32ToInt64: Self { .init(value: BinaryenTruncSFloat32ToInt64()) }
    public static var truncUFloat32ToInt32: Self { .init(value: BinaryenTruncUFloat32ToInt32()) }
    public static var truncUFloat32ToInt64: Self { .init(value: BinaryenTruncUFloat32ToInt64()) }
    public static var truncSFloat64ToInt32: Self { .init(value: BinaryenTruncSFloat64ToInt32()) }
    public static var truncSFloat64ToInt64: Self { .init(value: BinaryenTruncSFloat64ToInt64()) }
    public static var truncUFloat64ToInt32: Self { .init(value: BinaryenTruncUFloat64ToInt32()) }
    public static var truncUFloat64ToInt64: Self { .init(value: BinaryenTruncUFloat64ToInt64()) }
    public static var reinterpretFloat32: Self { .init(value: BinaryenReinterpretFloat32()) }
    public static var reinterpretFloat64: Self { .init(value: BinaryenReinterpretFloat64()) }
    public static var extendS8Int32: Self { .init(value: BinaryenExtendS8Int32()) }
    public static var extendS16Int32: Self { .init(value: BinaryenExtendS16Int32()) }
    public static var extendS8Int64: Self { .init(value: BinaryenExtendS8Int64()) }
    public static var extendS16Int64: Self { .init(value: BinaryenExtendS16Int64()) }
    public static var extendS32Int64: Self { .init(value: BinaryenExtendS32Int64()) }
    public static var convertSInt32ToFloat32: Self { .init(value: BinaryenConvertSInt32ToFloat32()) }
    public static var convertSInt32ToFloat64: Self { .init(value: BinaryenConvertSInt32ToFloat64()) }
    public static var convertUInt32ToFloat32: Self { .init(value: BinaryenConvertUInt32ToFloat32()) }
    public static var convertUInt32ToFloat64: Self { .init(value: BinaryenConvertUInt32ToFloat64()) }
    public static var convertSInt64ToFloat32: Self { .init(value: BinaryenConvertSInt64ToFloat32()) }
    public static var convertSInt64ToFloat64: Self { .init(value: BinaryenConvertSInt64ToFloat64()) }
    public static var convertUInt64ToFloat32: Self { .init(value: BinaryenConvertUInt64ToFloat32()) }
    public static var convertUInt64ToFloat64: Self { .init(value: BinaryenConvertUInt64ToFloat64()) }
    public static var promoteFloat32: Self { .init(value: BinaryenPromoteFloat32()) }
    public static var demoteFloat64: Self { .init(value: BinaryenDemoteFloat64()) }
    public static var reinterpretInt32: Self { .init(value: BinaryenReinterpretInt32()) }
    public static var reinterpretInt64: Self { .init(value: BinaryenReinterpretInt64()) }
    public static var addInt32: Self { .init(value: BinaryenAddInt32()) }
    public static var subInt32: Self { .init(value: BinaryenSubInt32()) }
    public static var mulInt32: Self { .init(value: BinaryenMulInt32()) }
    public static var divSInt32: Self { .init(value: BinaryenDivSInt32()) }
    public static var divUInt32: Self { .init(value: BinaryenDivUInt32()) }
    public static var remSInt32: Self { .init(value: BinaryenRemSInt32()) }
    public static var remUInt32: Self { .init(value: BinaryenRemUInt32()) }
    public static var andInt32: Self { .init(value: BinaryenAndInt32()) }
    public static var orInt32: Self { .init(value: BinaryenOrInt32()) }
    public static var xorInt32: Self { .init(value: BinaryenXorInt32()) }
    public static var shlInt32: Self { .init(value: BinaryenShlInt32()) }
    public static var shrUInt32: Self { .init(value: BinaryenShrUInt32()) }
    public static var shrSInt32: Self { .init(value: BinaryenShrSInt32()) }
    public static var rotLInt32: Self { .init(value: BinaryenRotLInt32()) }
    public static var rotRInt32: Self { .init(value: BinaryenRotRInt32()) }
    public static var eqInt32: Self { .init(value: BinaryenEqInt32()) }
    public static var neInt32: Self { .init(value: BinaryenNeInt32()) }
    public static var ltSInt32: Self { .init(value: BinaryenLtSInt32()) }
    public static var ltUInt32: Self { .init(value: BinaryenLtUInt32()) }
    public static var leSInt32: Self { .init(value: BinaryenLeSInt32()) }
    public static var leUInt32: Self { .init(value: BinaryenLeUInt32()) }
    public static var gtSInt32: Self { .init(value: BinaryenGtSInt32()) }
    public static var gtUInt32: Self { .init(value: BinaryenGtUInt32()) }
    public static var geSInt32: Self { .init(value: BinaryenGeSInt32()) }
    public static var geUInt32: Self { .init(value: BinaryenGeUInt32()) }
    public static var addInt64: Self { .init(value: BinaryenAddInt64()) }
    public static var subInt64: Self { .init(value: BinaryenSubInt64()) }
    public static var mulInt64: Self { .init(value: BinaryenMulInt64()) }
    public static var divSInt64: Self { .init(value: BinaryenDivSInt64()) }
    public static var divUInt64: Self { .init(value: BinaryenDivUInt64()) }
    public static var remSInt64: Self { .init(value: BinaryenRemSInt64()) }
    public static var remUInt64: Self { .init(value: BinaryenRemUInt64()) }
    public static var andInt64: Self { .init(value: BinaryenAndInt64()) }
    public static var orInt64: Self { .init(value: BinaryenOrInt64()) }
    public static var xorInt64: Self { .init(value: BinaryenXorInt64()) }
    public static var shlInt64: Self { .init(value: BinaryenShlInt64()) }
    public static var shrUInt64: Self { .init(value: BinaryenShrUInt64()) }
    public static var shrSInt64: Self { .init(value: BinaryenShrSInt64()) }
    public static var rotLInt64: Self { .init(value: BinaryenRotLInt64()) }
    public static var rotRInt64: Self { .init(value: BinaryenRotRInt64()) }
    public static var eqInt64: Self { .init(value: BinaryenEqInt64()) }
    public static var neInt64: Self { .init(value: BinaryenNeInt64()) }
    public static var ltSInt64: Self { .init(value: BinaryenLtSInt64()) }
    public static var ltUInt64: Self { .init(value: BinaryenLtUInt64()) }
    public static var leSInt64: Self { .init(value: BinaryenLeSInt64()) }
    public static var leUInt64: Self { .init(value: BinaryenLeUInt64()) }
    public static var gtSInt64: Self { .init(value: BinaryenGtSInt64()) }
    public static var gtUInt64: Self { .init(value: BinaryenGtUInt64()) }
    public static var geSInt64: Self { .init(value: BinaryenGeSInt64()) }
    public static var geUInt64: Self { .init(value: BinaryenGeUInt64()) }
    public static var addFloat32: Self { .init(value: BinaryenAddFloat32()) }
    public static var subFloat32: Self { .init(value: BinaryenSubFloat32()) }
    public static var mulFloat32: Self { .init(value: BinaryenMulFloat32()) }
    public static var divFloat32: Self { .init(value: BinaryenDivFloat32()) }
    public static var copySignFloat32: Self { .init(value: BinaryenCopySignFloat32()) }
    public static var minFloat32: Self { .init(value: BinaryenMinFloat32()) }
    public static var maxFloat32: Self { .init(value: BinaryenMaxFloat32()) }
    public static var eqFloat32: Self { .init(value: BinaryenEqFloat32()) }
    public static var neFloat32: Self { .init(value: BinaryenNeFloat32()) }
    public static var ltFloat32: Self { .init(value: BinaryenLtFloat32()) }
    public static var leFloat32: Self { .init(value: BinaryenLeFloat32()) }
    public static var gtFloat32: Self { .init(value: BinaryenGtFloat32()) }
    public static var geFloat32: Self { .init(value: BinaryenGeFloat32()) }
    public static var addFloat64: Self { .init(value: BinaryenAddFloat64()) }
    public static var subFloat64: Self { .init(value: BinaryenSubFloat64()) }
    public static var mulFloat64: Self { .init(value: BinaryenMulFloat64()) }
    public static var divFloat64: Self { .init(value: BinaryenDivFloat64()) }
    public static var copySignFloat64: Self { .init(value: BinaryenCopySignFloat64()) }
    public static var minFloat64: Self { .init(value: BinaryenMinFloat64()) }
    public static var maxFloat64: Self { .init(value: BinaryenMaxFloat64()) }
    public static var eqFloat64: Self { .init(value: BinaryenEqFloat64()) }
    public static var neFloat64: Self { .init(value: BinaryenNeFloat64()) }
    public static var ltFloat64: Self { .init(value: BinaryenLtFloat64()) }
    public static var leFloat64: Self { .init(value: BinaryenLeFloat64()) }
    public static var gtFloat64: Self { .init(value: BinaryenGtFloat64()) }
    public static var geFloat64: Self { .init(value: BinaryenGeFloat64()) }
    public static var atomicRMWAdd: Self { .init(value: BinaryenAtomicRMWAdd()) }
    public static var atomicRMWSub: Self { .init(value: BinaryenAtomicRMWSub()) }
    public static var atomicRMWAnd: Self { .init(value: BinaryenAtomicRMWAnd()) }
    public static var atomicRMWOr: Self { .init(value: BinaryenAtomicRMWOr()) }
    public static var atomicRMWXor: Self { .init(value: BinaryenAtomicRMWXor()) }
    public static var atomicRMWXchg: Self { .init(value: BinaryenAtomicRMWXchg()) }
    public static var truncSatSFloat32ToInt32: Self { .init(value: BinaryenTruncSatSFloat32ToInt32()) }
    public static var truncSatSFloat32ToInt64: Self { .init(value: BinaryenTruncSatSFloat32ToInt64()) }
    public static var truncSatUFloat32ToInt32: Self { .init(value: BinaryenTruncSatUFloat32ToInt32()) }
    public static var truncSatUFloat32ToInt64: Self { .init(value: BinaryenTruncSatUFloat32ToInt64()) }
    public static var truncSatSFloat64ToInt32: Self { .init(value: BinaryenTruncSatSFloat64ToInt32()) }
    public static var truncSatSFloat64ToInt64: Self { .init(value: BinaryenTruncSatSFloat64ToInt64()) }
    public static var truncSatUFloat64ToInt32: Self { .init(value: BinaryenTruncSatUFloat64ToInt32()) }
    public static var truncSatUFloat64ToInt64: Self { .init(value: BinaryenTruncSatUFloat64ToInt64()) }
    public static var splatVecI8x16: Self { .init(value: BinaryenSplatVecI8x16()) }
    public static var extractLaneSVecI8x16: Self { .init(value: BinaryenExtractLaneSVecI8x16()) }
    public static var extractLaneUVecI8x16: Self { .init(value: BinaryenExtractLaneUVecI8x16()) }
    public static var replaceLaneVecI8x16: Self { .init(value: BinaryenReplaceLaneVecI8x16()) }
    public static var splatVecI16x8: Self { .init(value: BinaryenSplatVecI16x8()) }
    public static var extractLaneSVecI16x8: Self { .init(value: BinaryenExtractLaneSVecI16x8()) }
    public static var extractLaneUVecI16x8: Self { .init(value: BinaryenExtractLaneUVecI16x8()) }
    public static var replaceLaneVecI16x8: Self { .init(value: BinaryenReplaceLaneVecI16x8()) }
    public static var splatVecI32x4: Self { .init(value: BinaryenSplatVecI32x4()) }
    public static var extractLaneVecI32x4: Self { .init(value: BinaryenExtractLaneVecI32x4()) }
    public static var replaceLaneVecI32x4: Self { .init(value: BinaryenReplaceLaneVecI32x4()) }
    public static var splatVecI64x2: Self { .init(value: BinaryenSplatVecI64x2()) }
    public static var extractLaneVecI64x2: Self { .init(value: BinaryenExtractLaneVecI64x2()) }
    public static var replaceLaneVecI64x2: Self { .init(value: BinaryenReplaceLaneVecI64x2()) }
    public static var splatVecF32x4: Self { .init(value: BinaryenSplatVecF32x4()) }
    public static var extractLaneVecF32x4: Self { .init(value: BinaryenExtractLaneVecF32x4()) }
    public static var replaceLaneVecF32x4: Self { .init(value: BinaryenReplaceLaneVecF32x4()) }
    public static var splatVecF64x2: Self { .init(value: BinaryenSplatVecF64x2()) }
    public static var extractLaneVecF64x2: Self { .init(value: BinaryenExtractLaneVecF64x2()) }
    public static var replaceLaneVecF64x2: Self { .init(value: BinaryenReplaceLaneVecF64x2()) }
    public static var eqVecI8x16: Self { .init(value: BinaryenEqVecI8x16()) }
    public static var neVecI8x16: Self { .init(value: BinaryenNeVecI8x16()) }
    public static var ltSVecI8x16: Self { .init(value: BinaryenLtSVecI8x16()) }
    public static var ltUVecI8x16: Self { .init(value: BinaryenLtUVecI8x16()) }
    public static var gtSVecI8x16: Self { .init(value: BinaryenGtSVecI8x16()) }
    public static var gtUVecI8x16: Self { .init(value: BinaryenGtUVecI8x16()) }
    public static var leSVecI8x16: Self { .init(value: BinaryenLeSVecI8x16()) }
    public static var leUVecI8x16: Self { .init(value: BinaryenLeUVecI8x16()) }
    public static var geSVecI8x16: Self { .init(value: BinaryenGeSVecI8x16()) }
    public static var geUVecI8x16: Self { .init(value: BinaryenGeUVecI8x16()) }
    public static var eqVecI16x8: Self { .init(value: BinaryenEqVecI16x8()) }
    public static var neVecI16x8: Self { .init(value: BinaryenNeVecI16x8()) }
    public static var ltSVecI16x8: Self { .init(value: BinaryenLtSVecI16x8()) }
    public static var ltUVecI16x8: Self { .init(value: BinaryenLtUVecI16x8()) }
    public static var gtSVecI16x8: Self { .init(value: BinaryenGtSVecI16x8()) }
    public static var gtUVecI16x8: Self { .init(value: BinaryenGtUVecI16x8()) }
    public static var leSVecI16x8: Self { .init(value: BinaryenLeSVecI16x8()) }
    public static var leUVecI16x8: Self { .init(value: BinaryenLeUVecI16x8()) }
    public static var geSVecI16x8: Self { .init(value: BinaryenGeSVecI16x8()) }
    public static var geUVecI16x8: Self { .init(value: BinaryenGeUVecI16x8()) }
    public static var eqVecI32x4: Self { .init(value: BinaryenEqVecI32x4()) }
    public static var neVecI32x4: Self { .init(value: BinaryenNeVecI32x4()) }
    public static var ltSVecI32x4: Self { .init(value: BinaryenLtSVecI32x4()) }
    public static var ltUVecI32x4: Self { .init(value: BinaryenLtUVecI32x4()) }
    public static var gtSVecI32x4: Self { .init(value: BinaryenGtSVecI32x4()) }
    public static var gtUVecI32x4: Self { .init(value: BinaryenGtUVecI32x4()) }
    public static var leSVecI32x4: Self { .init(value: BinaryenLeSVecI32x4()) }
    public static var leUVecI32x4: Self { .init(value: BinaryenLeUVecI32x4()) }
    public static var geSVecI32x4: Self { .init(value: BinaryenGeSVecI32x4()) }
    public static var geUVecI32x4: Self { .init(value: BinaryenGeUVecI32x4()) }
    public static var eqVecF32x4: Self { .init(value: BinaryenEqVecF32x4()) }
    public static var neVecF32x4: Self { .init(value: BinaryenNeVecF32x4()) }
    public static var ltVecF32x4: Self { .init(value: BinaryenLtVecF32x4()) }
    public static var gtVecF32x4: Self { .init(value: BinaryenGtVecF32x4()) }
    public static var leVecF32x4: Self { .init(value: BinaryenLeVecF32x4()) }
    public static var geVecF32x4: Self { .init(value: BinaryenGeVecF32x4()) }
    public static var eqVecF64x2: Self { .init(value: BinaryenEqVecF64x2()) }
    public static var neVecF64x2: Self { .init(value: BinaryenNeVecF64x2()) }
    public static var ltVecF64x2: Self { .init(value: BinaryenLtVecF64x2()) }
    public static var gtVecF64x2: Self { .init(value: BinaryenGtVecF64x2()) }
    public static var leVecF64x2: Self { .init(value: BinaryenLeVecF64x2()) }
    public static var geVecF64x2: Self { .init(value: BinaryenGeVecF64x2()) }
    public static var notVec128: Self { .init(value: BinaryenNotVec128()) }
    public static var andVec128: Self { .init(value: BinaryenAndVec128()) }
    public static var orVec128: Self { .init(value: BinaryenOrVec128()) }
    public static var xorVec128: Self { .init(value: BinaryenXorVec128()) }
    public static var andNotVec128: Self { .init(value: BinaryenAndNotVec128()) }
    public static var bitselectVec128: Self { .init(value: BinaryenBitselectVec128()) }
    public static var absVecI8x16: Self { .init(value: BinaryenAbsVecI8x16()) }
    public static var negVecI8x16: Self { .init(value: BinaryenNegVecI8x16()) }
    public static var anyTrueVecI8x16: Self { .init(value: BinaryenAnyTrueVecI8x16()) }
    public static var allTrueVecI8x16: Self { .init(value: BinaryenAllTrueVecI8x16()) }
    public static var bitmaskVecI8x16: Self { .init(value: BinaryenBitmaskVecI8x16()) }
    public static var shlVecI8x16: Self { .init(value: BinaryenShlVecI8x16()) }
    public static var shrSVecI8x16: Self { .init(value: BinaryenShrSVecI8x16()) }
    public static var shrUVecI8x16: Self { .init(value: BinaryenShrUVecI8x16()) }
    public static var addVecI8x16: Self { .init(value: BinaryenAddVecI8x16()) }
    public static var addSatSVecI8x16: Self { .init(value: BinaryenAddSatSVecI8x16()) }
    public static var addSatUVecI8x16: Self { .init(value: BinaryenAddSatUVecI8x16()) }
    public static var subVecI8x16: Self { .init(value: BinaryenSubVecI8x16()) }
    public static var subSatSVecI8x16: Self { .init(value: BinaryenSubSatSVecI8x16()) }
    public static var subSatUVecI8x16: Self { .init(value: BinaryenSubSatUVecI8x16()) }
    public static var mulVecI8x16: Self { .init(value: BinaryenMulVecI8x16()) }
    public static var minSVecI8x16: Self { .init(value: BinaryenMinSVecI8x16()) }
    public static var minUVecI8x16: Self { .init(value: BinaryenMinUVecI8x16()) }
    public static var maxSVecI8x16: Self { .init(value: BinaryenMaxSVecI8x16()) }
    public static var maxUVecI8x16: Self { .init(value: BinaryenMaxUVecI8x16()) }
    public static var avgrUVecI8x16: Self { .init(value: BinaryenAvgrUVecI8x16()) }
    public static var absVecI16x8: Self { .init(value: BinaryenAbsVecI16x8()) }
    public static var negVecI16x8: Self { .init(value: BinaryenNegVecI16x8()) }
    public static var anyTrueVecI16x8: Self { .init(value: BinaryenAnyTrueVecI16x8()) }
    public static var allTrueVecI16x8: Self { .init(value: BinaryenAllTrueVecI16x8()) }
    public static var bitmaskVecI16x8: Self { .init(value: BinaryenBitmaskVecI16x8()) }
    public static var shlVecI16x8: Self { .init(value: BinaryenShlVecI16x8()) }
    public static var shrSVecI16x8: Self { .init(value: BinaryenShrSVecI16x8()) }
    public static var shrUVecI16x8: Self { .init(value: BinaryenShrUVecI16x8()) }
    public static var addVecI16x8: Self { .init(value: BinaryenAddVecI16x8()) }
    public static var addSatSVecI16x8: Self { .init(value: BinaryenAddSatSVecI16x8()) }
    public static var addSatUVecI16x8: Self { .init(value: BinaryenAddSatUVecI16x8()) }
    public static var subVecI16x8: Self { .init(value: BinaryenSubVecI16x8()) }
    public static var subSatSVecI16x8: Self { .init(value: BinaryenSubSatSVecI16x8()) }
    public static var subSatUVecI16x8: Self { .init(value: BinaryenSubSatUVecI16x8()) }
    public static var mulVecI16x8: Self { .init(value: BinaryenMulVecI16x8()) }
    public static var minSVecI16x8: Self { .init(value: BinaryenMinSVecI16x8()) }
    public static var minUVecI16x8: Self { .init(value: BinaryenMinUVecI16x8()) }
    public static var maxSVecI16x8: Self { .init(value: BinaryenMaxSVecI16x8()) }
    public static var maxUVecI16x8: Self { .init(value: BinaryenMaxUVecI16x8()) }
    public static var avgrUVecI16x8: Self { .init(value: BinaryenAvgrUVecI16x8()) }
    public static var absVecI32x4: Self { .init(value: BinaryenAbsVecI32x4()) }
    public static var negVecI32x4: Self { .init(value: BinaryenNegVecI32x4()) }
    public static var anyTrueVecI32x4: Self { .init(value: BinaryenAnyTrueVecI32x4()) }
    public static var allTrueVecI32x4: Self { .init(value: BinaryenAllTrueVecI32x4()) }
    public static var bitmaskVecI32x4: Self { .init(value: BinaryenBitmaskVecI32x4()) }
    public static var shlVecI32x4: Self { .init(value: BinaryenShlVecI32x4()) }
    public static var shrSVecI32x4: Self { .init(value: BinaryenShrSVecI32x4()) }
    public static var shrUVecI32x4: Self { .init(value: BinaryenShrUVecI32x4()) }
    public static var addVecI32x4: Self { .init(value: BinaryenAddVecI32x4()) }
    public static var subVecI32x4: Self { .init(value: BinaryenSubVecI32x4()) }
    public static var mulVecI32x4: Self { .init(value: BinaryenMulVecI32x4()) }
    public static var minSVecI32x4: Self { .init(value: BinaryenMinSVecI32x4()) }
    public static var minUVecI32x4: Self { .init(value: BinaryenMinUVecI32x4()) }
    public static var maxSVecI32x4: Self { .init(value: BinaryenMaxSVecI32x4()) }
    public static var maxUVecI32x4: Self { .init(value: BinaryenMaxUVecI32x4()) }
    public static var dotSVecI16x8ToVecI32x4: Self { .init(value: BinaryenDotSVecI16x8ToVecI32x4()) }
    public static var negVecI64x2: Self { .init(value: BinaryenNegVecI64x2()) }
    public static var anyTrueVecI64x2: Self { .init(value: BinaryenAnyTrueVecI64x2()) }
    public static var allTrueVecI64x2: Self { .init(value: BinaryenAllTrueVecI64x2()) }
    public static var shlVecI64x2: Self { .init(value: BinaryenShlVecI64x2()) }
    public static var shrSVecI64x2: Self { .init(value: BinaryenShrSVecI64x2()) }
    public static var shrUVecI64x2: Self { .init(value: BinaryenShrUVecI64x2()) }
    public static var addVecI64x2: Self { .init(value: BinaryenAddVecI64x2()) }
    public static var subVecI64x2: Self { .init(value: BinaryenSubVecI64x2()) }
    public static var mulVecI64x2: Self { .init(value: BinaryenMulVecI64x2()) }
    public static var absVecF32x4: Self { .init(value: BinaryenAbsVecF32x4()) }
    public static var negVecF32x4: Self { .init(value: BinaryenNegVecF32x4()) }
    public static var sqrtVecF32x4: Self { .init(value: BinaryenSqrtVecF32x4()) }
    public static var qFMAVecF32x4: Self { .init(value: BinaryenQFMAVecF32x4()) }
    public static var qFMSVecF32x4: Self { .init(value: BinaryenQFMSVecF32x4()) }
    public static var addVecF32x4: Self { .init(value: BinaryenAddVecF32x4()) }
    public static var subVecF32x4: Self { .init(value: BinaryenSubVecF32x4()) }
    public static var mulVecF32x4: Self { .init(value: BinaryenMulVecF32x4()) }
    public static var divVecF32x4: Self { .init(value: BinaryenDivVecF32x4()) }
    public static var minVecF32x4: Self { .init(value: BinaryenMinVecF32x4()) }
    public static var maxVecF32x4: Self { .init(value: BinaryenMaxVecF32x4()) }
    public static var pMinVecF32x4: Self { .init(value: BinaryenPMinVecF32x4()) }
    public static var ceilVecF32x4: Self { .init(value: BinaryenCeilVecF32x4()) }
    public static var floorVecF32x4: Self { .init(value: BinaryenFloorVecF32x4()) }
    public static var truncVecF32x4: Self { .init(value: BinaryenTruncVecF32x4()) }
    public static var nearestVecF32x4: Self { .init(value: BinaryenNearestVecF32x4()) }
    public static var pMaxVecF32x4: Self { .init(value: BinaryenPMaxVecF32x4()) }
    public static var absVecF64x2: Self { .init(value: BinaryenAbsVecF64x2()) }
    public static var negVecF64x2: Self { .init(value: BinaryenNegVecF64x2()) }
    public static var sqrtVecF64x2: Self { .init(value: BinaryenSqrtVecF64x2()) }
    public static var qFMAVecF64x2: Self { .init(value: BinaryenQFMAVecF64x2()) }
    public static var qFMSVecF64x2: Self { .init(value: BinaryenQFMSVecF64x2()) }
    public static var addVecF64x2: Self { .init(value: BinaryenAddVecF64x2()) }
    public static var subVecF64x2: Self { .init(value: BinaryenSubVecF64x2()) }
    public static var mulVecF64x2: Self { .init(value: BinaryenMulVecF64x2()) }
    public static var divVecF64x2: Self { .init(value: BinaryenDivVecF64x2()) }
    public static var minVecF64x2: Self { .init(value: BinaryenMinVecF64x2()) }
    public static var maxVecF64x2: Self { .init(value: BinaryenMaxVecF64x2()) }
    public static var pMinVecF64x2: Self { .init(value: BinaryenPMinVecF64x2()) }
    public static var pMaxVecF64x2: Self { .init(value: BinaryenPMaxVecF64x2()) }
    public static var ceilVecF64x2: Self { .init(value: BinaryenCeilVecF64x2()) }
    public static var floorVecF64x2: Self { .init(value: BinaryenFloorVecF64x2()) }
    public static var truncVecF64x2: Self { .init(value: BinaryenTruncVecF64x2()) }
    public static var nearestVecF64x2: Self { .init(value: BinaryenNearestVecF64x2()) }
    public static var truncSatSVecF32x4ToVecI32x4: Self { .init(value: BinaryenTruncSatSVecF32x4ToVecI32x4()) }
    public static var truncSatUVecF32x4ToVecI32x4: Self { .init(value: BinaryenTruncSatUVecF32x4ToVecI32x4()) }
    public static var truncSatSVecF64x2ToVecI64x2: Self { .init(value: BinaryenTruncSatSVecF64x2ToVecI64x2()) }
    public static var truncSatUVecF64x2ToVecI64x2: Self { .init(value: BinaryenTruncSatUVecF64x2ToVecI64x2()) }
    public static var convertSVecI32x4ToVecF32x4: Self { .init(value: BinaryenConvertSVecI32x4ToVecF32x4()) }
    public static var convertUVecI32x4ToVecF32x4: Self { .init(value: BinaryenConvertUVecI32x4ToVecF32x4()) }
    public static var convertSVecI64x2ToVecF64x2: Self { .init(value: BinaryenConvertSVecI64x2ToVecF64x2()) }
    public static var convertUVecI64x2ToVecF64x2: Self { .init(value: BinaryenConvertUVecI64x2ToVecF64x2()) }
    public static var loadSplatVec8x16: Self { .init(value: BinaryenLoadSplatVec8x16()) }
    public static var loadSplatVec16x8: Self { .init(value: BinaryenLoadSplatVec16x8()) }
    public static var loadSplatVec32x4: Self { .init(value: BinaryenLoadSplatVec32x4()) }
    public static var loadSplatVec64x2: Self { .init(value: BinaryenLoadSplatVec64x2()) }
    public static var loadExtSVec8x8ToVecI16x8: Self { .init(value: BinaryenLoadExtSVec8x8ToVecI16x8()) }
    public static var loadExtUVec8x8ToVecI16x8: Self { .init(value: BinaryenLoadExtUVec8x8ToVecI16x8()) }
    public static var loadExtSVec16x4ToVecI32x4: Self { .init(value: BinaryenLoadExtSVec16x4ToVecI32x4()) }
    public static var loadExtUVec16x4ToVecI32x4: Self { .init(value: BinaryenLoadExtUVec16x4ToVecI32x4()) }
    public static var loadExtSVec32x2ToVecI64x2: Self { .init(value: BinaryenLoadExtSVec32x2ToVecI64x2()) }
    public static var loadExtUVec32x2ToVecI64x2: Self { .init(value: BinaryenLoadExtUVec32x2ToVecI64x2()) }
    public static var narrowSVecI16x8ToVecI8x16: Self { .init(value: BinaryenNarrowSVecI16x8ToVecI8x16()) }
    public static var narrowUVecI16x8ToVecI8x16: Self { .init(value: BinaryenNarrowUVecI16x8ToVecI8x16()) }
    public static var narrowSVecI32x4ToVecI16x8: Self { .init(value: BinaryenNarrowSVecI32x4ToVecI16x8()) }
    public static var narrowUVecI32x4ToVecI16x8: Self { .init(value: BinaryenNarrowUVecI32x4ToVecI16x8()) }
    public static var widenLowSVecI8x16ToVecI16x8: Self { .init(value: BinaryenWidenLowSVecI8x16ToVecI16x8()) }
    public static var widenHighSVecI8x16ToVecI16x8: Self { .init(value: BinaryenWidenHighSVecI8x16ToVecI16x8()) }
    public static var widenLowUVecI8x16ToVecI16x8: Self { .init(value: BinaryenWidenLowUVecI8x16ToVecI16x8()) }
    public static var widenHighUVecI8x16ToVecI16x8: Self { .init(value: BinaryenWidenHighUVecI8x16ToVecI16x8()) }
    public static var widenLowSVecI16x8ToVecI32x4: Self { .init(value: BinaryenWidenLowSVecI16x8ToVecI32x4()) }
    public static var widenHighSVecI16x8ToVecI32x4: Self { .init(value: BinaryenWidenHighSVecI16x8ToVecI32x4()) }
    public static var widenLowUVecI16x8ToVecI32x4: Self { .init(value: BinaryenWidenLowUVecI16x8ToVecI32x4()) }
    public static var widenHighUVecI16x8ToVecI32x4: Self { .init(value: BinaryenWidenHighUVecI16x8ToVecI32x4()) }
    public static var swizzleVec8x16: Self { .init(value: BinaryenSwizzleVec8x16()) }
}
